
input {
  kafka {
    bootstrap_servers => "localhost:9092"
    topics => ["telegraf"]
    codec => json
  }
}

# Convert the timestamp set by Telegraf into a format usable by Elastic Search
filter {
  date {
    match => ["timestamp", "UNIX"]
    target => "telegraf_timestamp"
  }
}

# Normalize the device-interface field to remove the node name
filter {
  if [name] == "device-interface" {
    dissect {
      mapping => {
        "[tags][device-interface]" => "%{[tags][node]}.%{[tags][device-interface]}"
      }
    }
  }
}

# Normalize the network-interface field to remove the node name
filter {
  if [name] == "network-interface" {
    dissect {
      mapping => {
        "[tags][network-interface]" => "%{[tags][node]}.%{[tags][network-interface]}"
      }
    }
  }
}

# The port field returns the device-interface name, normalize for filtering
filter {
  if [name] == "interface" {
    mutate {
      rename => {
        "[tags][port]" => "[tags][device-interface]"
      }
    }
  }
}

# Normalize peer-path-state fields to match bfd field names
filter {
  if [name] == "peer-path-state" {
    mutate {
      rename => {
        "[tags][peerRouter]" => "[tags][peer-name]"
        "[tags][adjacentAddress]" => "[tags][peer-host]"
        "[tags][deviceInterface]" => "[tags][device-name]"
        "[tags][networkInterface]" => "[tags][network-interface]"
      }
    }
  }
}

# Create a peer path field out of the sub components
filter {
  if [name] == "bfd" {
    mutate {
      add_field => {
        "[tags][peer-path]" => "%{[tags][peer-name]}/%{[tags][peer-host]}/%{[tags][node]}/%{[tags][device-name]}/%{[tags][vlan]}"
      }
    }
  }
}

# Bandwidth appears to be in bits per second, multiply by 8 for bytes per second
filter {
  if [fields][bandwidth] {
    ruby {
      code => "event.set('[fields][bandwidth]', event.get('[fields][bandwidth]').to_i * 8)"
    }
  }
}

# Bandwidth appears to be in bits per second, multiply by 8 for bytes per second
filter {
  if [fields][bandwidth-received] {
    ruby {
      code => "event.set('[fields][bandwidth-received]', event.get('[fields][bandwidth-received]').to_i * 8)"
    }
  }
}

# Bandwidth appears to be in bits per second, multiply by 8 for bytes per second
filter {
  if [fields][bandwidth-transmitted] {
    ruby {
      code => "event.set('[fields][bandwidth-transmitted]', event.get('[fields][bandwidth-transmitted]').to_i * 8)"
    }
  }
}

# Signal Value is interpreted as a text field by default, ensure it is numeric
filter {
  if [name] == "lte" {
    mutate {
      convert => {
        "[fields][signal-value]" => "integer"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "telegraf-%{+YYYY.MM.dd}"
  }
}
